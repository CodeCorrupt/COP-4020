COP 4020 Lecture -*- Outline -*-

------------------------------------------

* Actors

def: An *actor* is a process that communicates
     with other processes by sending messages.

i.e., an Erlang process

Used as clients, servers, nodes in distributed systems

Two types:

   - stateless (state doesn't change)
   - stateful 

Q: Why would you want to write a server without any state?
   That scales better, easy to restart (fault tolerant)

------------------------------------------

* stateless servers

------------------------------------------

* Computation server example

Math server sends a message of the form 
  {ok,Val}

to Pid, where 
  Val = math:f(math:g(... (math:h(X)) ...))

when it receives messages of the form:
  {Pid, compute, [f, g, ..., h], X}

See mathserver.hs

------------------------------------------

* Stateful servers

------------------------------------------

* Print spooler example

* !!! TO DO: Fix code !!!

Spooler process handles messages of forms:

   {Client, print, Str}
      from a Client process,
      to print string Str

   {Printer, grab}
      from Printer process, to get a job to print

   {Client, status}
      from a Client process
      to return status of the spooler.

see printspooler.erl
    printer.erl
    printclients.erl

------------------------------------------

* Resource arbiter

Server that responds to 3 kinds of messages

{Pid, status}  
     sends Pid message: free or inUse

{Pid, reserve}
     eventually sends Pid reserved,
     when no other process is using resource

{Pid, release}
     lets the resource be used by another process

------------------------------------------

* !!! TO DO: Fix everyting below !!!

          WHAT STATE?

What information does the resourcearbiter need?




------------------------------------------
        At least a queue of waiting pids (who have sent reserve)
        To do this we can keep an ets ordered_set, and track a next

------------------------------------------
          RESOURCEARBITER MODULE

-module(resourcearbiter).
-export([start/0, init/0]).
-export_type([status/0]).
start() ->
    spawn(?MODULE, init, []).


init() ->



loop(




















------------------------------------------
        ... see resourcearbiter*.erl

% $Id: resourcearbiter.erl,v 1.1 2013/04/12 00:33:46 leavens Exp leavens $
-module(resourcearbiter).
-export([start/0, init/0]).
-export_type([status/0]).

% The state of the resource arbiter is a tuple of the form
% {state, Status, Waiting, Next}
% where Status is of type status(),
-type status() :: free | inUse.
% Waiting is an ets ordered_set of pairs of the type {integer(), pid()},
% and Next is a pos_integer().

start() ->
    spawn(?MODULE, init, []).

init() ->
    WaitQ = ets:new(queue, [ordered_set]),
    loop({state, free, WaitQ, 1}).


loop({state, Status, Waiting, Next}) ->
    receive
	{Client, 'query'} ->
	    Client ! Status,
	    loop({state, Status, Waiting, Next});
	{Client, reserve} ->
	    case Status of
		free ->
		    Client ! reserved,
		    loop({state, inUse, Waiting, Next});
		inUse ->
		    ets:insert(Waiting, {Next, Client}),
		    loop({state, Status, Waiting, Next+1})
	    end;
	 {_Client, release} ->
	    % assert Status == inUse
	    case ets:first(Waiting) of
		'$end_of_table' ->
		    loop({state, free, Waiting, Next});
		{N,Pid} ->
		    Pid ! reserved,
		    ets:delete(Waiting, {N,Pid}),
		    loop({state, inUse, Waiting, Next})
	    end
    end.
