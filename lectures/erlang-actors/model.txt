COP 4020 Lecture -*- Outline -*-

* Message-passing concurrency

Based in part on 

- Peter van Roy and Seif Haridi's book,
  "Concepts, Techniques, and Models of Computer Programming"
  (MIT Press, 2004), 
- Joe Armstrong's book "Programming Erlang" (Pragmatic, 2007).

------------------------------------------

* Motivation

------------------------------------------

* Message-passing concurrency

def: message passing is a programming style in which
     a program consists of independent entities (agents)
     that interact by sending messages asynchronously

Q: What is asynchronous?

   Not waiting for a reply

Q: What's the importance of message passing?

   - multi-agent systems (same as message passing systems)

   - natural for distributed systems
     reflects structure of system and its costs

   - lends itself to building highly reliable systems
     failures don't make other entities hang

------------------------------------------

* New concepts and capabilities

------------------------------------------

* Spawn

new capability: create new process

    Pid = spawn(Fun)
    Pid2 = spawn(mymodule,myfun,[Arg1,Arg2,...])
    Pid3 = spawn(OtherMachine,Fun)  % on OtherMachine
    Pid4 = spawn(OtherMachine,mymodule,myfun,[Arg1,Arg2,...])

See spawndemo.erl
    
main() ->
    _Other = spawn(fun rest/0).

rest() ->
    timer:sleep(200),
    io:format("message from process ~w~n", [self()]).

The process runs in a separate address space,
doesn't share scope except if passed a closure,
so it has to communicate by message passing...

------------------------------------------

* send and receive

new capability: send to named process

    Pid ! Message

 - sends Message to Pid, and immediately continues
 - all clients can always send

new capability: receive sent messages

  Example:

  loop() ->
     receive
       {P, doIt, X} -> P ! {self(), answer, X+2}, loop();
       {P, halt} -> P ! ok
     end

Each process has a mailbox.

Fundamentally nondeterministic, the receiver resolves races 
in message sends.

See sendreceive.erl and run examples

------------------------------------------

* Send examples (race condition)

See sendexamples.hs
