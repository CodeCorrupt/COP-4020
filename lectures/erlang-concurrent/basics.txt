Erlang concurrent

----------------------------------------

* Remote Procedure Call

See area_server.erl

----------------------------------------

* Processes are cheap

See process.erl

----------------------------------------

* Receive with time out

receive
    Pattern1 [when Guard1] ->
        Expression1;
    Pattern2 [when Guard2] ->
        Expression2;
    ...
after Time ->
    Expressions
end

If no matching message has arrived within Time
milliseconds of entering the receive expression,
then the processes will stop waiting for a message
and evaluate Expressions.

----------------------------------------

* Receive with Just a Timeout

sleep(T) ->
   receive
   after T ->
       true
   end.

----------------------------------------

* Receive with Timeout Value Zero: flush buffer

flush_buffer() ->
    receive
        _Any ->
            flush_buffer()
    after 0 ->
       true
    end.

A timeout value of 0 causes the body of the
timeout to occur immediately, but before this
happens, the system tries to match any patterns
in the mailbox.

----------------------------------------

* Receive with Timeout Value Zero: priority receive

priority receive() ->
    receive
       {alarm, X} ->
           {alarm, X}
    after 0 ->
       receive
           Any ->
               Any
       end
    end.

----------------------------------------

* Implementing a timer

See stimer.erl

----------------------------------------

* Selective receive

The receive primitive is used to extract messages from the process
mailbox, but it does more than simple pattern matching.

It also queues unmatched messages for later processing and
manages timeouts.

receive
    Pattern1 [when Guard1] ->
        Expression1;
    Pattern2 [when Guard2] ->
        Expression2;
    ...
after Time ->
    Expressions
end

----------------------------------------

* Registered Processes

If we want to send a message to a process, then we need to known
its PID, but when a process is created, only the parent process
knows the PID.

It would be inconvenient if the PID had to be sent to all processes
in the system that want to communicate with this process.

Erlang has a method for publishing a process identifier so that any
process in the system can communicate with this process.  Such a
process is called a registered process.

- register(AnAtom, Pid)

- unregister(AnAtom)

- whereis(AnAtom) -> Pid | undefined

- registered() -> [AnAtom::atom()]

For example, we can do:

Pid = spawn(area,_server, loop, []).

register(area, Pid).

area ! {rectangle, 4, 5}.

----------------------------------------

* Clock

See clock.erl

----------------------------------------

* Ring communication

See ring.erl

----------------------------------------

* Errors in concurrent programs

----------------------------------------

* Error handling philosophy

Error handling in concurrent Erlang programs is based
on the idea of remote detection and handling of errors.

Instead of handling the error in the process where the error
occurs, we let the process die and correct the error in some
other process.

Since we concentrate on cure rather than prevention, our
systems have very little defensive code; instead we have
code to clean up the system after errors have occurred.

The Erlang philosophy for building fault-tolerant software
can be summed up in two easy-to-remember phrases:

- "Let some other process fix the error." and

- "Let it crash."

----------------------------------------

* Error-handling processes

----------------------------------------

* Processes

There are two types of processes:

- normal processes

- system processes

Spawn creates a normal process.

A normal process can become a system process
by evaluating the BIF process_flag(trap_exit,true).

----------------------------------------

* Links

Processes can be linked.  If the two processes A and B
are linked and A terminates for any reason, an error signal
will be sent to B and the other way round.

----------------------------------------

* Link sets

The link set of a process P is the set of processes
that are linked to P. 

----------------------------------------

* Monitors

Monitors are similar to processes but are uni-directional.

If A monitors B and if B terminates for any reason, a "down"
message will be sent to A but not the other way round.

----------------------------------------

* Messages and error signals

Processes collaborate by exchaning messages or error signals.

Messages are sent using the send primitive.

Error signals are sent automatically when
a process crashes or when a process terminates.

The error signals are sent to the link set
of the process terminated.

----------------------------------------

* Receipt of an error signal in a system process

When a system process receives an error signal, the signal
is converted into a message of the form {'EXIT', Pid, Why}.

Pid is the identity of the process that terminated, and
Why is the reason for termination (exit reason).

If the processes terminates without an error, then Why will
be the atom normal; otherwise Why describes the errror.

----------------------------------------

* Receipt of an error signal in a normal process

When a normal process receives an error signal, it will
terminate if the reason is not normal.  When it terminates,
it also broadcasts an exit signal to its link set.

----------------------------------------

* Explicit error signals

A process that evaluates exit(Why) will terminate 
(if this code is not executing within the scope of 
a catch or try primitive) and broadcast an exit signal 
with the reason Why to its link set.

A process can send "fake" error signals by evaluating
exit(Pid, Why). In this case, Pid will receive an exit
signal with the reason Why.  The processes that called
exit/2 does not die (this is deliberate).

----------------------------------------

* Untrappable exit signal

When a system process receives a kill signal, it terminates.  
Kill signals are generated by calling exit(Pid, kill).

This signal bypasses the normal error signal processing
mechanism and is not converted into a message.

The exit kill should be reserved for rogue processes that
refuse to die using any of the other error handonling mechanisms.

----------------------------------------

* Groups of processes that die together

Often you'll want to create groups of programs that die together.

When processes collaborate to solve a problem and something goes
wrong, we can sometimes recover, but if we can't recover, we just
want to stop everything we were doing.

This is rather like the notion of a transaction.

----------------------------------------

* Setting up a firewall

Sometimes we don't want all our linked processes
to die, and we want to stop the propagation of
error through the system.

To achieve this a process has to become a system process
(meaning that it can it can trap exit signals).  This
process then acts like a firewall.

----------------------------------------

* Monitors

Monitors are similar to links but with several significant differences.

- Monitors are unidirectional.

- When a monitored process dies, a "down" message and not an
  exit signal is sent to the monitoring process.

  This means that the monitoring process does not have to become
  a system process in order to handle errors.

----------------------------------------

* Programming for fault tolerance

----------------------------------------

* Performing an action when a process dies

in lib_misc.erl

on_exit(Pid, Fun) ->
  spawn(fun() ->
                Ref = monitor(process, Pid),
                receive
                    {'DOWN', Ref, process, Pid, Why} ->
                        Fun(Why)
                end
        end).

To test, enter the following in the shell:

Pid = spawn(fun() -> lib_misc:test() end).

on_exit(Pid, fun(Pid, Why) -> lib_misc:err_msg(Pid, Why) end).

Pid ! hello.

----------------------------------------

* Making a set of processes that all die together

Suppose we want to create several worker processes that are used to solve
some problem.

They evaluate the functions F1, F2, etc. If any process dies, we want 
them all to die.  

in lib_misc

start(Fs) ->
    spawn(fun() ->
		  [spawn_link(F) || F <- Fs],
		  receive
		      after
			  infinity ->
			       true
		  end
	  end).

----------------------------------------

* Making a process that never dies

in lib_misc

keep_alive(Name, Fun) ->
    register(Name, Pid = spawn(Fun)),
    on_exit(Pid, fun(_Pid, _Why) ->
			 keep_alive(Name, Fun) end).

