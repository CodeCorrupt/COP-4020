Lecture -*- Outline -*-

------------------------------------------

* Programs in Haskell

   Based on material from Haskell.org
   See "Introduction to IO"
   on the Haskell Wiki (https://www.haskell.org/haskellwiki/Introduction_to_IO)

------------------------------------------
   
* Programs are modules with Main

One module, named Main, which exports main

module Main where   --

main :: IO ()
main = do ...


The module declaration can be omitted, defaults to Main

------------------------------------------

* Simple I/O example

The type of a main program is an IO action

file SimpleIO.lhs

> import System.IO
>
> main :: IO()
> main = do putStr "Hello! What is your name? "
>           hFlush stdout
>           name <- getLine
>           putStrLn ("Hello, " ++ name ++ "!")

------------------------------------------

* Program structure

main :: IO ()
main = do 
         vals <- inputAct
         let res = compute vals
         outputAct res

inputAction :: IO ValType

outputAction :: ResType -> IO ()

------------------------------------------

* Picture: inputAct, computation, outputAct

            +-------------+
   inputAct |             | outputAct   
   ========>| computation | =========>
            |             |
            +-------------+
            
------------------------------------------

* Example of input, computation, and output

A program is a set of modules, one of which must be called Main
and export the name "main".

If a file does not have a module declaration,
then it is implicitly named "Main", so that is what is done with this file.

file TempConvertMain.lhs, the main program

> import TemperatureConversion
> import Control.Exception.Base
>
> main :: IO()
> main = do
>          catch (loop rcp) bye

The loop function does an IO action forever,
    until the action throws an exception

> loop :: IO () -> IO ()
> loop act = do
>             act
>             loop act

The bye function takes an IOException, prints "bye!", and returns (),

> bye :: IOException -> IO ()
> bye _ = do
>           putStrLn "bye!"
>           return ()

The rcp function reads a Double, then prints its conversion
    
> rcp :: IO ()
> rcp = do
>         ftemp <- ask
>         putStrLn ("in degrees C is: " ++ show (convert ftemp))

The ask function obtains a temperature in Farenheit from the user.

> ask :: IO Double
> ask = do
>         putStr "Temp. in degrees F? "
>         temp <- getLine
>         f <- readIO temp
>         return f

file TemperatureConversion.lhs 

module TemperatureConversion where

convert :: Double -> Double
convert f = (f - 32) * (5/9)

------------------------------------------
