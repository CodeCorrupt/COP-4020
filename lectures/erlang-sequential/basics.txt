COP 4020 Lecture -*- Outline -*-

* Basics of Erlang

------------------------------------------

* Erlang overview

Erlang designed for:

 - reliable distributed systems (telephony)

Language Design:

 - mix of functional and logic programming influences
 - actor model for concurrency and distribution

Q: Why this kind of design?

 - immutable data allows concurrency without locking
 - distribution allows for scalable systems, 
   avoids single point failures

------------------------------------------

* Erlang shell

See http://www.erlang.org/doc/man/shell.html

$cat helloworld.erl
-module(helloworld).
-export([greeting/0]).

greeting() ->
     io:format("Hello, world!~n").

$erl
Eshell V5.10.4  (abort with ^G)
1> c(mylength).
{ok,mylength}
2> helloworld:greeting().
Hello, world!
ok
3>

use c(File) to compile File

------------------------------------------

* Data types in Erlang

http://erlang.org/doc/reference_manual/typespec.html

------------------------------------------

* Primitive types

  number()
    integer()    3, 7
    float()      3.14159, 2.7e-3
  atom()         stop, go
  port()
  pid()
  reference()
  ...

------------------------------------------

* Atoms

symbols with a fast equality test

start with a lower case letter

      an_atom
      go
      yes

or are enclosed in single quotes:

      'Truth'
      'Justice'
      'american way'

Note:
  Variables identifiers
  must start with an Upper Case letter 
  or an underscore (_)

------------------------------------------

* Compound types 

  binary()       <<1:1,0:1>>
  fun()          fun (X) -> X end, fun foo/1
  tuple()        {point,3,4}
  list           "union types"

------------------------------------------

* Means of combination

------------------------------------------

* Pattern matching

The = operator, unifies both sides:

   {point,X,Y} = {point,3,4}
   makes X be 3 and Y be 4.

Pattern matching in function clauses:

    xcoord({point,X,_}) -> X.
    ycoord({point,_,Y}) -> Y.

    P = {point,3,4}
    xcoord(P)   returns 3

Case expressions:

     xcoord(P) ->
        case P of
          {point,X,_} -> X
        end.
        
------------------------------------------

* Differences from Haskell pattern matching

Multiple uses of the same variable:

     case P of
        {point,X,X} -> same;
        _ -> different
     end

can be thought of as sugar for:

     case P of
        {point,X,Z} when X =:= Z -> same;
        _ -> different
     end

Variables that are already determined
stand for their value:

     X = 2,
     case P of
        {point,X,_} -> "x coordinate was 2";
        {point,Q,_} -> "x coordinate was " ++ integer_to_list(Q)
     end

can be thought of as sugar for:

     X = 2,
     case P of
        {point,Z,_} when Z =:= X -> "x coordinate was 2";
        {point,Q,_} -> "x coordinate was " ++ integer_to_list(Q)
     end

------------------------------------------

* Functions
    
parameters are passed by value (eagerly evaluated).
see passing.erl

overloading based on number of arguments

------------------------------------------

* Fully recursive and tail recursive code

See mylength.erl

lenFR([])    -> 0;
lenFR([_|T]) -> 1 + lenFR(T).

% note the semicolons and period.

lenTR(Ls) -> lenTR(Ls,0).

lenTR([],N)    -> N;
lenTR([_|T],N) -> lenTR(T,N+1).

% note that the helper has the same name 
% but a different number of arguments

------------------------------------------

* Programs
    
modules are sets of function definitions
controled exports
lexical scope 
 - uses closures (see closuredemo.erl)
 - but is restricted to functions

------------------------------------------

* Examples

casedemo.erl      helloworld.erl  patterns.erl        quiz_tests.erl
closuredemo.erl   mylength.erl    patterns_tests.erl  recursion.erl
delete_first.erl  passing.erl     quiz.erl
